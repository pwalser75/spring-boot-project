plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.5.4'
    id "com.github.ben-manes.versions" version "0.39.0"
}

description = 'Example Spring-Boot Project'
group = 'org.test'
version = '1.0.0-SNAPSHOT'

ext {

    dateTimeFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    buildDate = java.time.LocalDateTime.now()

    springBootVersion = '2.5.4'
    h2Version = '1.4.200'
    swaggerVersion = '3.0.0'
    jacksonVersion = '2.12.5'
    jerseyVersion = '3.0.2'
    jaxbVersion = '2.3.0'

    junitVersion = '5.8.0'
    assertjVersion = '3.20.2'
    mockitoVersion = '3.12.4'

    hibernateVersion = '5.5.7.Final'
    liquibaseVersion = '4.4.3'
    javaValidationVersion = '2.0.1.Final'
    javaxAnnotationVersion = '1.3.2'


    libs = [
            testbase              : [
                    "org.junit.jupiter:junit-jupiter-api:$junitVersion",
                    "org.assertj:assertj-core:$assertjVersion",
                    "org.mockito:mockito-core:$mockitoVersion"
            ],
            api                   : [
                    "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                    "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
                    "javax.validation:validation-api:$javaValidationVersion",
                    "javax.annotation:javax.annotation-api:$javaxAnnotationVersion",
                    "io.springfox:springfox-swagger2:$swaggerVersion"
            ],
            springBoot            : [
                    "org.springframework.boot:spring-boot-starter-validation:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",
                    "io.springfox:springfox-boot-starter:$swaggerVersion",
                    "io.springfox:springfox-swagger-ui:$swaggerVersion"
            ],
            springBootTest        : [
                    "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
            ],
            h2Database            : [
                    "com.h2database:h2:$h2Version"
            ],
            liquibase             : [
                    "org.liquibase:liquibase-core:$liquibaseVersion"
            ],
            jpaAnnotationProcessor: [
                    "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"
            ],
            jaxrsClient           : [
                    "org.glassfish.jersey.core:jersey-client:$jerseyVersion",
                    "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
                    "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
            ]
    ]
}

dependencies {
    implementation libs.api
    implementation libs.springBoot
    implementation libs.liquibase

    annotationProcessor libs.jpaAnnotationProcessor

    testImplementation libs.testbase
    testImplementation libs.springBootTest
    testImplementation libs.jaxrsClient

    runtimeOnly libs.h2Database
}

defaultTasks 'clean', 'build'

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}
test {
    useJUnitPlatform()
}
jar {
    manifest {
        attributes(
                "Name": project.name,
                "Version": project.version,
                "Build-Date": dateTimeFormat.format(buildDate)
        )
    }
}

repositories {
    mavenCentral()
}

def isNonStable = { version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

task start(dependsOn: ['assemble', 'bootRun']) {
    group = 'Start/Run'
    description = 'Start the boot app'
}